// Task 1 üñ•
/
// –î–∞–Ω –º–∞—Å—Å–∏–≤:
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –¥–ª–∏–Ω—É.

const colors = ['red', 'green', 'blue'];
console.log(colors.length);

//Task 2
//–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã.

const animals = ['monkey', 'dog', 'cat'];
console.log(animals[animals.length - 1]);

//Task 3

//–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

const numbers = [5, 43, 63, 23, 90];

//1–π —Å–ø–æ—Å–æ–±
console.log(numbers.splice(0, numbers.length));
console.log(numbers);

//2–π —Å–ø–æ—Å–æ–±
while (numbers.length > 0) {
    pop();
}
console.log(numbers);

//Task 4
// + –£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Borya`.
// + –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ `Andrey`.
// + –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.

const students = ['Polina', 'Dasha', 'Masha'];
students.splice(students.length - 1, 1, 'Borya');
console.log(students);
students.splice(0, 1, 'Andrey');
console.log(students);

//Task 5
//–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. 
// –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª **`for`**, –∑–∞—Ç–µ–º **`for of`**.

const cats = ['Gachito', 'Tom', 'Batman'];

for(let i = 0; i < cats.length; i++) {
    console.log(cats[i]);
}

for(catsElements of cats) {
    console.log(catsElements);
}

//Task 6
// + –°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω. - concat
// + –í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ **`8`** - indexOf

const evenNumbers = [2, 4, 6, 8, 10];
const oddNumbers = [1, 3, 5, 7, 9];
const num = evenNumbers.concat(oddNumbers);
console.log(num);
console.log(num.indexOf(8));

//Task 7
// + –ù–∞—à –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –≤ –Ω–µ–º —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü.
// + –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.

const binary = [0, 0, 0, 0]
console.log(binary.join('1'));

//Advanced
//Task 1
//Variant 1
function palindrome(str) {
    return str.split('').reverse().join('') == str;
}
console.log(palindrome( '49094'));
console.log(palindrome('–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞'));//–ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º?

//Variant 2
function palindromeChecker(str) {
    str = str.toLowerCase().replace(/[^–∞-—èa-z1-9]/gi, '');// —á—Ç–æ –∑–∞ —Å—Ç—Ä–µ–º–Ω–∞—è —à—Ç—É–∫–∞?
    const lastIndex = str.length - 1;
    for (let i = 0; i < str.length / 2; i++) {
        if (str[i] !== str[lastIndex - i]) {
            return false;
        }
    }
    return true;
}
console.log(palindromeChecker('–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞'));
//Task 2
//> –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.

const matrix = [
    [12, 98, 78, 65, 23],
    [54, 76, 98, 43, 65],
    [13, 324, 65, 312],
    [9092, 22, 45, 90000],
]
for(let i = 0; i < matrix.length; i++) {
    let avr = 0;
    for(let k=0; k < matrix[i].length; k++) {
        /* —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏, 
        —Å–æ—Ö—Ä–∞–Ω—è—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –¥–µ–ª–∏–º –Ω–∞ –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞*/
        avr += (matrix[i][k])/matrix[i].length;
    }
    console.log(avr);
}

//Task 3
// –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞, –≤ –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0, 
// –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4];
const positiveNumbers = [];
const negativeNumbers =[];
for (let numb of mixedNumbers) {
    if (numb < 0){
        negativeNumbers.push(numb);
    }
    else if (numb >= 0){
        positiveNumbers.push(numb);
    }
}
console.log(positiveNumbers);
console.log(negativeNumbers);

//Task 4



